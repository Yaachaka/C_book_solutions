==========================================================================
@@@@ Exercise 6 (Section 17.5): knkcch17e06: Modify the delete_from_list 
function so that it uses only one pointer variable instead of two (cur and prev).
==========================================================================
SOLUTION:
@@@@ Check PROGRAM OUTPUT.
@@@@ Given
struct node *delete_from_list(struct node *list, int n)
{
	struct node *cur, *prev;

	for(cur = list, prev = NULL; cur != NULL && cur -> value != n; prev = cur, cur = cur->next)
	;

	if(cur == NULL)
		return list;
	if(prev == NULL)
		list = list->next;
	else
		prev->next = cur->next;
	free(cur);
	return list;

}
@@@@ Modified
void delete_from_list(struct node **list, int n)
{
	struct node *cur = *list;

	while(cur)
	{
		if(cur->value == n)
		{
			*list = cur->next;
			free(cur);
			break;
		}
		*list = cur->next;
		cur = cur->next;
	}
	
}
==========================================================================
PROGRAM: (FLAGS: -std=c99): knkcch17e06.c
#include <stdio.h>
#include <stdlib.h>  //free()
//---------------------------------------------------------------------------
struct node
{
	int value;
	struct node *next;
};

//---------------------------------------------------------------------------
void delete_from_list(struct node **list, int n);
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//------------------------START OF MAIN()--------------------------------------
int main(void)
{
	printf("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");
	printf("File: %s, C Version: %d, Date: %s, Time: %s\n\n", __FILE__, __STDC_VERSION__, __DATE__, __TIME__);



	printf("\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");
	return 0;
}
//-------------------------END OF MAIN()---------------------------------------
void delete_from_list(struct node **list, int n)
{
	struct node *cur = *list;

	while(cur)
	{
		if(cur->value == n)
		{
			*list = cur->next;
			free(cur);
			break;
		}
		*list = cur->next;
		cur = cur->next;
	}
	
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
==========================================================================
PROGRAM OUTPUT: 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
File: knkcch17e06.c, C Version: 199901, Date: Mar 16 2021, Time: 14:52:02


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
==========================================================================