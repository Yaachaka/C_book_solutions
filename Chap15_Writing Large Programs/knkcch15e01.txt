==========================================================================
@@@@ Exercise 1 (Section 15.1): knkcch15e01:*************************************
Section 15.1 listed several advantages of dividing a program into multiple source files.
(a) Describe several other advantages.
(b) Describe some disadvantages.
==========================================================================
SOLUTION:
@@@@ Advantages:
>>> Grouping related functions and variables into a single file helps clarify 
the structure of the program.
>>> Each source file can be compiled separately - a great time-saver if the 
program is large and must be changed frequently (which is common during program 
development).
>>> Functions are more easily reused in other programs when grouped in separate
source files.
>>> UNIX originated the concept of the makefile, a file containing the 
information necessary to build a program. Suppose file a depends on file b, and 
because a change to b will require us to require us to recompile a.
Once we have created a makefile for a program, ew can use the make utility 
to build (or rebuild) the program. By checking the time and date associated with 
each file in the program, make can determine which files are out of date. it then 
invokes the commands necessary to rebuild the program.
This reduces the time consumption, since the entire program is not in one file 
and it is totally helpfull when the program is huge.

@@@@ Disadvantages:
>>> When calling a function that is defined in another file, we always need to 
make sure that the compiler has seen a prototype for the function prior to the 
call.
>>> We always need to include the header file declaring a function in the source 
file that contains the function's definition. Failure to do so can cause hard-to-find 
bugs, since the calls of the function elsewhere in the program may not match the 
function's definition.
>>> When declarations of the same variable appear in different files, the 
compiler can't check that the declarations match the variable's definition. 
For example, one file may contain the definition
	int i;
while another file contains the declarations
	extern long i;
An error of this kind can cause the program to behave unpredictably.
>>> Each source file in the program must be compiled separately. 
(Header files don't need to be compiled; the contents of a header file 
are automatically compiled whenever a source file that includes it is compiled.) 
For each source file, the compiler generates a file containing object code. 
These files -- known as object files -- have the extension .o in UNIX and .obj 
in windows.
The linker combines the object files created in the previous step -- along with 
code for library funcions -- to produce an executable file. Among other duties, 
the linker is responsible for resolving external references left behind by the 
compiler. (An external reference occurs when a function in one file calls a 
function defined in another file or accesses a variable defined in another file.)
==========================================================================
PROGRAM: NA
==========================================================================
PROGRAM OUTPUT: NA
==========================================================================