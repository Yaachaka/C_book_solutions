==========================================================================
@@@@ Exercise 10 (Section 14.3): knkcch14e10:**************************************
Functions can often—but not always—be written as parameterized macros. Discuss what
characteristics of a function would make it unsuitable as a macro.
==========================================================================
SOLUTION:
@@@@ The compiled code will often be larger.
Each macro invocation causes the insertion of the macro's replacement list,
thereby increasing the size of the source program (and hence the compiled code). 
The more often the macro is used, the more pronounce this effect is. The problem 
is compounded when macro invocations are nested.
@@@@ Arguments aren't type-checked.
When a function is called, the compiler checks each argument to see if it has the
appropriate type. If not, either the argument is converted to the proper type 
or the compiler produces an error message. Macro arguments aren't checked by the 
preprocessor, nor are they converted.
@@@@ It's not possible to have a pointer to a macro.
C allows pointers to functions. Macros are removed during preprocessing, so there's no 
corresponding notion of "pointer to a macro".
@@@@ A macro may evaluate its arguments mopre than once.
A function evaluates its arguments only once; a macro may evaluate its arguments 
two or more times. Evaluating an argument more than once can cause unexpected 
behavior if the argument has side effects (A simple example is when an increment or 
decrement operator is used).
==========================================================================
PROGRAM: NA
==========================================================================
PROGRAM OUTPUT: NA
==========================================================================